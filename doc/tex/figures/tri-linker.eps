%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.5 (Build 23F79) Quartz PS Context)
%%Title: tri-linker.eps
%%Creator: ChemDraw(tm) 22.2.0.3348
%%CreationDate: 2024-07-29 20:52:27 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 164 105
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2023 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 164 105
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: XNGXYH+ArialMT
%!FontType1-1.0: XNGXYH+ArialMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin
/FontName /XNGXYH+ArialMT def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /N put
dup 34 /O put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1361 1 index div -665 2 index div 4096 3 index div 2060 5 -1 roll div]cvx def
/sfnts [<

02210222022E02350242024F024F025E026502710290029202B402D602FA0307030B030F0315032A0347035D036503740379039603B003CC03DD03E203F603FC03FC03FF040A041F04220426042B0447045F0475049E04E704E7055C05CB05E5060A066D068606B806F10736073E07500751075D078F07B607D4086000B600C300B500B700000000000000000000000001E00381034503B5008E0233041902CE02CE002D005F0064034D023F000002A80188027D01B402240578063B023B014E00F00426029402C6029F02F6023B034D014B0153006A0231000000000000061404AA0000003C04C300ED04BC026502CE03B50078060C017E02EF060C00B201000239000001C50330042B03CB00DA03DF010704A100DB040A011701ED02A70350010B01BD043E05580021039C00AE0371017D00B5024500000AFB088C012B014E01AA00870054013201F803FF0003024E00B4003703E30083006B02D800ED00770088009701640467008E0033017C00E700A6029E0329056E062A061501C90269048A021301B4000204A9000002390124010305140084015D039A06EF02D9007500CF040A00DE03AC04BC02CF02AE034D04F005520168006D007D00860071FF810079055804D2016700030156002504E00094007C033204210094007F0072005C002F00B6001800BA00B80041034D00720018001F004C016A01550099009A009A009800B200040078006900140057006E00CE00B4065402B80067050E016500E7000004CBFE52005AFFA60099FF67006EFF92002DFFD40087FF7C00B800A800E5008F00A80185FE7B0070001E00D900DE014C054602CF0546FF2D028A02D90253029600B700000000000000000000000000000125011800EA00EA00AE0000003E05BB008A04D70053003FFF8CFFD500150028002200990062004A00E4006D00EE00E5004803C00033FE4E02B1FF460370007905DF0051FFA7FF1F010A0068FF6C004F00BC00A507050061072B00ED04B001D200B6007B00650252FF740365FE690094008F005C004000860075008900894043555441403F3E3D3C3B3A3938373534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A090807060504030201002C4523466020B02660B004262348482D2C452346236120B02661B004262348482D2C45234660B0206120B04660B004262348482D2C4523462361B0206020B02661B02061B004262348482D2C45234660B0406120B06660B004262348482D2C4523462361B0406020B02661B04061B004262348482D2C0110203C003C2D2C20452320B0CD442320B8015A51582320B08D44235920B0ED51582320B04D44235920B09051582320B00D44235921212D2C20204518684420B001602045B04676688A4560442D2C01B10B0A4323



00A20800406A1F4026434932402043493240263A3D3240203A3D329F209F26024026969932402096993240268E923240208E92324026848C324020848C3240267A813240207A813240266C763240206C76324026646A324020646A3240265A5F3240205A5F3240264F543240204F5432B8029EB724271F374F6B0120410F0277003002770040027700500277000402770277027700F90400001F029BB22A2A1FB8029A402B292A1F80BA0180BC0180520180A201806501807E01808101803C01805E01802B01801C01801E0180400180BB0138000100800140B40180400180BB013800010080013940180180CA0180AD018073018026018025018024018020013740B80221B2493340B80221B2453340B80221B341423240B80221B33D3E320F410F0221003F0221007F0221000300BF022100CF022100FF0221000300400221B320223240B80221B3191E3240B80222B32A3F3240B80221B32E3A326F414802C3007F02C3008F02C300DF02C30004002F02C3006002C300CF02C30003000F02C3003F02C3005F02C300C002C300EF02C300FF02C3000600DF02220001008F02220001000F0222002F0222003F0222005F0222007F022200EF0222000600BF022100EF02210002006F0221007F022100AF02210003002F0221003F0221004F0221000302C302C30222022202210221401D101C102B1048038F1C010F1E014F1EFF1E023700161600000012110811B8010DB6F70DF8F70D00094109028E028F001D001F0290028F001D001F028FB2F91D1FB80198B226BB1F41150197001E0401001F013900260125001F013800730401001F0135001C0801001F0134001C02AB001F0132B21C561FB8010FB2262C1FBA010E001E0401B61FF91CE41FE91CB80201B61FE81CBB1FD720B80401B21FD51CB802ABB61FD41C891FC92FB80801B21FBC26B80101B21FBA20B80201B61FB91C381FADCAB80401B21F8126B8019AB21F7E26B8019AB61F7D1C471F6B1CB80401B21F6526B8019AB21F5E73B80401400F1F52265A1F481C891F441C621F4073B80801B61F3F1C5E1F3C26B8019AB21F351CB80401B61F301CBB1F2B1CB80401B61F2A1C561F291CB80101B21F231EB80401B21F5537B80168402C07960758074F07360732072C0721071F071D071B071408120810080E080C080A080808060804080208000814B8FFE0402B00000100140610000001000604000001000410000001001002000001000200000001000002010802004A00B013034B024B5342014BB0C063004B6220B0F65323B8010A515AB005234201B0124B004B5442B0382B4BB807FF52B0372B4BB007505B58B101018E59B0382BB00288B801005458B801FFB101018E851BB0124358B900010111858D1BB900010128858D5959001816763F183F123E113946443E113946443E1139

447374456944456944732B2B2B2B2B732B002B732B74752B2B2B2B2B2B2B2B2B2B2B2B2B2B737475732B7374757374752B2B2B742B2B0000
00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/N 1 def
/O 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1361 -665 4096 2060} readonly def
/UniqueID 4167158 def
currentdict end
currentfile eexec

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/XNGXYH+ArialMT cguidfix
/F1.1/XNGXYH+ArialMT renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 105 m
164 105 l
164 0 l
0 0 l
h
W
0 0 164 105 rc
-0.050000001 105 m
164.05 105 l
164.05 -0.050000001 l
-0.050000001 -0.050000001 l
h
f
0 0 0 sc
1 0 0 -1 17.970406 31.818922 cm
/F1.1[ 6 0 0 -6 0 0]sf
0 4.2949219 m
(!)s
CM
7.6730566 42.407242 m
8.0042572 41.748894 l
3.2430623 32.521885 l
2.5145888 32.410336 l
7.6730566 42.407242 l
h
f
2.5145888 32.410336 m
3.2430623 32.521885 l
10.552149 25.13792 l
10.432556 24.410166 l
2.5145888 32.410336 l
h
f
10.432556 24.410166 m
10.552149 25.13792 l
16.671324 28.236172 l
16.938841 27.704411 l
10.432556 24.410166 l
h
f
19.929604 32.966591 m
19.341202 32.876492 l
18.256435 40.070824 l
18.780272 40.589867 l
19.929604 32.966591 l
h
f
18.780272 40.589867 m
18.256435 40.070824 l
8.0042572 41.748894 l
7.6730566 42.407242 l
18.780272 40.589867 l
h
f
1 0 0 -1 27.399956 26.905132 cm
0 4.3710938 m
(")s
CM
23.270638 27.694519 m
23.543598 28.223507 l
26.851364 26.516678 l
26.578403 25.987692 l
23.270638 27.694519 l
h
f
1 0 0 -1 23.843868 50.128052 cm
0 4.3710938 m
(")s
CM
17.526173 40.303349 m
17.107426 40.726414 l
22.851316 46.411655 l
23.270063 45.988586 l
17.526173 40.303349 l
h
f
18.893568 38.921848 m
18.474821 39.344913 l
24.21871 45.030155 l
24.637459 44.607086 l
18.893568 38.921848 l
h
f
1 0 0 -1 6.4125366 16.346815 cm
0 4.3710938 m
(")s
CM
11.269505 25.381294 m
11.856951 25.28516 l
10.555436 17.332081 l
9.9679899 17.428217 l
11.269505 25.381294 l
h
f
9.3512325 25.695219 m
9.9386787 25.599083 l
8.6371641 17.646006 l
8.0497179 17.74214 l
9.3512325 25.695219 l
h
f
32.734318 26.267839 m
32.412682 26.768724 l
38.799286 30.886499 l
38.831097 30.198944 l
32.734318 26.267839 l
h
f
38.831097 30.198944 m
38.799286 30.886499 l
48.40099 25.910322 l
48.433472 25.223043 l
38.831097 30.198944 l
h
f
1 0 0 -1 35.976856 43.526829 cm
0 4.3710938 m
(")s
CM
38.173153 29.937164 m
37.578556 29.909063 l
37.202881 37.85762 l
37.797478 37.885723 l
38.173153 29.937164 l
h
f
40.114773 30.028933 m
39.520176 30.00083 l
39.144501 37.94939 l
39.739098 37.977489 l
40.114773 30.028933 l
h
f
48.433472 25.223043 m
48.40099 25.910322 l
57.486679 31.767105 l
57.519161 31.079828 l
48.433472 25.223043 l
h
f
57.519161 31.079828 m
57.486679 31.767105 l
67.084251 26.793356 l
67.116737 26.106079 l
57.519161 31.079828 l
h
f
67.116737 26.106079 m
67.084251 26.793356 l
75.89502 32.451416 l
76.186699 32.295563 l
76.207047 31.965481 l
67.116737 26.106079 l
h
f
1 0 0 -1 83.449745 29.554235 cm
0 4.3710938 m
(")s
CM
76.207047 31.965481 m
76.186699 32.295563 l
76.463043 32.47303 l
82.901154 29.165781 l
82.628197 28.636793 l
76.207047 31.965481 l
h
f
1 0 0 -1 73.343384 45.292896 cm
0 4.3710938 m
(")s
CM
76.463043 32.47303 m
76.186699 32.295563 l
75.89502 32.451416 l
75.540215 39.669575 l
76.134811 39.697678 l
76.463043 32.47303 l
h
f
88.784103 28.916943 m
88.462471 29.417826 l
94.578117 33.329258 l
94.869965 33.1786 l
94.880882 32.848049 l
88.784103 28.916943 l
h
f
1 0 0 -1 92.026649 46.175934 cm
0 4.3710938 m
(")s
CM
95.145638 33.361267 m
94.869965 33.1786 l
94.578117 33.329258 l
94.22348 40.552608 l
94.818077 40.580711 l
95.145638 33.361267 l
h
f
91.478058 45.787479 m
91.205093 45.258492 l
84.779152 48.589184 l
84.763603 48.917263 l
85.044411 49.091949 l
91.478058 45.787479 l
h
f
78.677742 44.655605 m
78.35611 45.15649 l
84.467567 49.064735 l
84.763603 48.917263 l
84.779152 48.589184 l
78.677742 44.655605 l
h
f
94.880882 32.848049 m
94.869965 33.1786 l
95.145638 33.361267 l
104.45078 28.559425 l
104.48326 27.872147 l
94.880882 32.848049 l
h
f
104.48326 27.872147 m
104.45078 28.559425 l
113.53647 34.416206 l
113.56895 33.728931 l
104.48326 27.872147 l
h
f
113.56895 33.728931 m
113.53647 34.416206 l
123.13404 29.442459 l
123.16653 28.755182 l
113.56895 33.728931 l
h
f
123.16653 28.755182 m
123.13404 29.442459 l
132.22365 35.302074 l
132.25684 34.614586 l
123.16653 28.755182 l
h
f
1 0 0 -1 129.39317 47.942001 cm
0 4.3710938 m
(")s
CM
131.58946 34.352337 m
130.99487 34.324234 l
130.6192 42.272793 l
131.21379 42.300896 l
131.58946 34.352337 l
h
f
133.53108 34.444103 m
132.93649 34.416 l
132.56082 42.364559 l
133.15541 42.392662 l
133.53108 34.444103 l
h
f
1 0 0 -1 139.49953 32.203339 cm
0 4.3710938 m
(")s
CM
132.25684 34.614586 m
132.22365 35.302074 l
138.95094 31.814884 l
138.67798 31.285896 l
132.25684 34.614586 l
h
f
1 0 0 -1 140.17635 21.378466 cm
0 4.2949219 m
(!)s
CM
141.69637 26.580013 m
142.29097 26.608116 l
142.48267 22.551939 l
141.88808 22.523836 l
141.69637 26.580013 l
h
f
140.98764 15.6947 m
141.55894 15.527519 l
139.6214 8.9695425 l
138.92737 8.7212791 l
140.98764 15.6947 l
h
f
138.92737 8.7212791 m
139.6214 8.9695425 l
148.19409 3.0990787 l
148.21466 2.3624012 l
138.92737 8.7212791 l
h
f
148.21466 2.3624012 m
148.19409 3.0990787 l
156.42052 9.4341259 l
157.12749 9.2260418 l
148.21466 2.3624012 l
h
f
157.12749 9.2260418 m
156.42052 9.4341259 l
152.93584 19.219801 l
153.35269 19.828003 l
157.12749 9.2260418 l
h
f
153.35269 19.828003 m
152.93584 19.219801 l
145.23042 18.989243 l
145.21384 19.584272 l
153.35269 19.828003 l
h
f
1 0 0 -1 156.90855 30.62575 cm
0 4.3710938 m
(")s
CM
152.18182 19.305672 m
151.6908 19.642174 l
156.25505 26.302334 l
156.74608 25.965834 l
152.18182 19.305672 l
h
f
153.78584 18.207754 m
153.29482 18.544256 l
157.85846 25.20351 l
158.34947 24.86701 l
153.78584 18.207754 l
h
f
1 0 0 -1 126.79002 7.4266176 cm
0 4.3710938 m
(")s
CM
140.18437 8.4485483 m
140.38449 7.8879366 l
132.67467 5.1357446 l
132.47455 5.6963563 l
140.18437 8.4485483 l
h
f
139.53093 10.279213 m
139.73105 9.7186012 l
132.02118 6.9663911 l
131.82106 7.5270033 l
139.53093 10.279213 l
h
f
85.044411 49.091949 m
84.763603 48.917263 l
84.467567 49.064735 l
83.973511 59.524078 l
84.552475 59.895851 l
85.044411 49.091949 l
h
f
84.552475 59.895851 m
83.973511 59.524078 l
74.358543 64.464127 l
74.937508 64.835892 l
84.552475 59.895851 l
h
f
74.937508 64.835892 m
74.358543 64.464127 l
73.83197 75.605484 l
74.443413 75.289978 l
74.937508 64.835892 l
h
f
74.443413 75.289978 m
73.83197 75.605484 l
83.221298 81.635033 l
83.254486 80.94754 l
74.443413 75.289978 l
h
f
1 0 0 -1 80.390823 94.274956 cm
0 4.3710938 m
(")s
CM
82.58712 80.685295 m
81.992523 80.657188 l
81.616844 88.605751 l
82.211441 88.63385 l
82.58712 80.685295 l
h
f
84.52874 80.777061 m
83.934143 80.748955 l
83.558464 88.697517 l
84.153061 88.725616 l
84.52874 80.777061 l
h
f
1 0 0 -1 90.497185 78.536293 cm
0 4.3710938 m
(")s
CM
83.254486 80.94754 m
83.221298 81.635033 l
89.948593 78.147842 l
89.675636 77.618851 l
83.254486 80.94754 l
h
f
1 0 0 -1 99.7509 84.333115 cm
0 4.2949219 m
(!)s
CM
95.831543 77.899002 m
95.509911 78.399887 l
98.530342 80.339409 l
98.851974 79.838524 l
95.831543 77.899002 l
h
f
105.1027 80.492569 m
105.33321 81.041382 l
111.7859 78.312332 l
111.95469 77.594597 l
105.1027 80.492569 l
h
f
111.95469 77.594597 m
111.7859 78.312332 l
118.5775 86.174538 l
119.31186 86.112617 l
111.95469 77.594597 l
h
f
119.31186 86.112617 m
118.5775 86.174538 l
113.20185 95.05761 l
113.48766 95.736893 l
119.31186 86.112617 l
h
f
113.48766 95.736893 m
113.20185 95.05761 l
103.08663 92.6884 l
102.52954 93.170914 l
113.48766 95.736893 l
h
f
102.52954 93.170914 m
103.08663 92.6884 l
102.48153 85.453049 l
101.88845 85.504021 l
102.52954 93.170914 l
h
f
1 0 0 -1 92.324242 102.19695 cm
0 4.3710938 m
(")s
CM
102.9166 91.950233 m
102.52715 91.500053 l
96.388039 96.810905 l
96.777489 97.261093 l
102.9166 91.950233 l
h
f
104.18845 93.420174 m
103.799 92.969986 l
97.65976 98.28096 l
98.04921 98.73114 l
104.18845 93.420174 l
h
f
1 0 0 -1 111.99921 69.668602 cm
0 4.3710938 m
(")s
CM
112.36655 78.813881 m
112.94614 78.949577 l
114.77557 71.135544 l
114.19598 70.999847 l
112.36655 78.813881 l
h
f
110.47419 78.36969 m
111.05378 78.505379 l
112.88297 70.692444 l
112.30338 70.556747 l
110.47419 78.36969 l
h
f
ep
end
%%Trailer
%%EOF
